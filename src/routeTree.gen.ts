/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TanksIndexImport } from './routes/tanks/index'
import { Route as TanksTankIdImport } from './routes/tanks/$tankId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TanksIndexRoute = TanksIndexImport.update({
  id: '/tanks/',
  path: '/tanks/',
  getParentRoute: () => rootRoute,
} as any)

const TanksTankIdRoute = TanksTankIdImport.update({
  id: '/tanks/$tankId',
  path: '/tanks/$tankId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/tanks/$tankId': {
      id: '/tanks/$tankId'
      path: '/tanks/$tankId'
      fullPath: '/tanks/$tankId'
      preLoaderRoute: typeof TanksTankIdImport
      parentRoute: typeof rootRoute
    }
    '/tanks/': {
      id: '/tanks/'
      path: '/tanks'
      fullPath: '/tanks'
      preLoaderRoute: typeof TanksIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tanks/$tankId': typeof TanksTankIdRoute
  '/tanks': typeof TanksIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tanks/$tankId': typeof TanksTankIdRoute
  '/tanks': typeof TanksIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/tanks/$tankId': typeof TanksTankIdRoute
  '/tanks/': typeof TanksIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/tanks/$tankId' | '/tanks'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tanks/$tankId' | '/tanks'
  id: '__root__' | '/' | '/tanks/$tankId' | '/tanks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TanksTankIdRoute: typeof TanksTankIdRoute
  TanksIndexRoute: typeof TanksIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TanksTankIdRoute: TanksTankIdRoute,
  TanksIndexRoute: TanksIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/tanks/$tankId",
        "/tanks/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/tanks/$tankId": {
      "filePath": "tanks/$tankId.tsx"
    },
    "/tanks/": {
      "filePath": "tanks/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
